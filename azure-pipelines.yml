# Inspired from https://www.meziantou.net/2019/02/18/computing-code-coverage-for-a-net-core-project-with-azure-devops-and-coverlet
# and https://github.com/wulfland/code-coverage-sample/blob/master/azure-pipelines.yml

name: $(Date:yyyyMMdd).$(Rev:.r)

strategy:
  matrix:
    linux:
      imageName: 'ubuntu-16.04'
    #windows:
    #  imageName: 'vs2017-win2016'

pool:
  vmImage: $(imageName)

trigger:
- master

variables:
  buildConfiguration: 'Release'

steps:

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: '927afb1a-f6f6-430b-b477-a0007d55b46c'
    cliProjectKey: 'SynkerAPI'
    cliProjectName: 'SynkerAPI'
    organization: 'Fazzani'
    scannerMode: 'CLI'
    configMode: 'manual'
    extraProperties: 'sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/coverage.opencover.xml'

- script: dotnet restore
  displayName: 'dotnet restore'

- task: DotNetCoreCLI@2
  displayName: 'dotnet build $(buildConfiguration)'
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: '--no-restore -c $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test $(buildConfiguration)'
  inputs:
    command: test
    projects: 'Synker.Api.sln'
    arguments: '-p:Exclude=[xunit.*]* -c $(buildConfiguration) -p:CollectCoverage=true "-p:CoverletOutputFormat=\"cobertura,opencover\""'
    nobuild: true

- task: DotNetCoreCLI@2
  displayName: Install ReportGenerator Global Tool
  inputs:
    command: custom
    custom: tool
    arguments: install dotnet-reportgenerator-globaltool --tool-path .

# Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
# First install the tool on the machine, then run it
- script: |
    ./reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage "-reporttypes:\"HtmlInline_AzurePipelines;Cobertura\""
  displayName: Create Code Coverage report

# Publish the code coverage result (summary and web site)
# The summary allows to view the coverage percentage in the summary tab
# The web site allows to view which lines are covered directly in Azure Pipeline
- task: PublishCodeCoverageResults@1
  displayName: 'Publish Code Coverage report'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/coverage.cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'

- task: PublishTestResults@2
  displayName: 'Publishing Unit Test Results'
  inputs:
    testRunner: VSTest
    testResultsFiles: '/home/vsts/work/**/*.trx'

- task: SonarCloudPublish@1
  displayName: 'Sonar Publish'
  inputs:
    cliProjectKey: 'SynkerAPI'
    cliProjectName: 'SynkerAPI'

- task: DotNetCoreCLI@2
  displayName: 'dotnet publish $(buildConfiguration)'
  inputs:
    command: publish
    projects: Synker.Api/Synker.Api.csproj
    arguments: '--no-build -c $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: true
    publishWebProjects: false
    modifyOutputPath: true

- task: PublishBuildArtifacts@1