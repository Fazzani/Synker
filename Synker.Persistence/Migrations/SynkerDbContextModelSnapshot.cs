// <auto-generated />
using System;
using System.Diagnostics.CodeAnalysis;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Synker.Persistence;

namespace Synker.Persistence.Migrations
{
    [DbContext(typeof(SynkerDbContext))]
    [ExcludeFromCodeCoverage]
    partial class SynkerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Synker.Domain.Entities.Media", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("transaction_timestamp()");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Labels");

                    b.Property<long?>("PlaylistId");

                    b.Property<int>("Position");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("transaction_timestamp()");

                    b.HasKey("Id");

                    b.HasIndex("DisplayName");

                    b.HasIndex("PlaylistId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("Synker.Domain.Entities.Playlist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("transaction_timestamp()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<byte>("State");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("transaction_timestamp()");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("UserId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Synker.Domain.Entities.PlaylistDataSource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name");

                    b.Property<short>("PlaylistDataSourceFormat");

                    b.Property<byte>("State");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PlaylistDataSources");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PlaylistDataSource");
                });

            modelBuilder.Entity("Synker.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("transaction_timestamp()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("transaction_timestamp()");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Synker.Domain.Entities.M3uPlaylistDataSource", b =>
                {
                    b.HasBaseType("Synker.Domain.Entities.PlaylistDataSource");

                    b.HasDiscriminator().HasValue("M3uPlaylistDataSource");
                });

            modelBuilder.Entity("Synker.Domain.Entities.XtreamPlaylistDataSource", b =>
                {
                    b.HasBaseType("Synker.Domain.Entities.PlaylistDataSource");

                    b.HasDiscriminator().HasValue("XtreamPlaylistDataSource");
                });

            modelBuilder.Entity("Synker.Domain.Entities.Media", b =>
                {
                    b.HasOne("Synker.Domain.Entities.Playlist", "Playlist")
                        .WithMany("Medias")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Synker.Domain.Entities.Core.UriAddress", "Url", b1 =>
                        {
                            b1.Property<long>("MediaId");

                            b1.Property<string>("Url")
                                .IsRequired();

                            b1.HasKey("MediaId");

                            b1.ToTable("Media");

                            b1.HasOne("Synker.Domain.Entities.Media")
                                .WithOne("Url")
                                .HasForeignKey("Synker.Domain.Entities.Core.UriAddress", "MediaId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Synker.Domain.Entities.Playlist", b =>
                {
                    b.HasOne("Synker.Domain.Entities.User", "User")
                        .WithMany("Playlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Synker.Domain.Entities.PlaylistDataSource", b =>
                {
                    b.HasOne("Synker.Domain.Entities.User", "User")
                        .WithMany("PlaylistDataSources")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Synker.Domain.Entities.M3uPlaylistDataSource", b =>
                {
                    b.OwnsOne("Synker.Domain.Entities.Core.UriAddress", "Uri", b1 =>
                        {
                            b1.Property<long>("M3uPlaylistDataSourceId");

                            b1.Property<string>("Url")
                                .IsRequired();

                            b1.HasKey("M3uPlaylistDataSourceId");

                            b1.ToTable("PlaylistDataSources");

                            b1.HasOne("Synker.Domain.Entities.M3uPlaylistDataSource")
                                .WithOne("Uri")
                                .HasForeignKey("Synker.Domain.Entities.Core.UriAddress", "M3uPlaylistDataSourceId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Synker.Domain.Entities.XtreamPlaylistDataSource", b =>
                {
                    b.OwnsOne("Synker.Domain.Entities.Core.BasicAuthentication", "Authentication", b1 =>
                        {
                            b1.Property<long>("XtreamPlaylistDataSourceId");

                            b1.Property<string>("Password")
                                .HasMaxLength(255);

                            b1.Property<string>("User")
                                .IsRequired()
                                .HasMaxLength(255);

                            b1.HasKey("XtreamPlaylistDataSourceId");

                            b1.ToTable("PlaylistDataSources");

                            b1.HasOne("Synker.Domain.Entities.XtreamPlaylistDataSource")
                                .WithOne("Authentication")
                                .HasForeignKey("Synker.Domain.Entities.Core.BasicAuthentication", "XtreamPlaylistDataSourceId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Synker.Domain.Entities.Core.UriAddress", "Server", b1 =>
                        {
                            b1.Property<long>("XtreamPlaylistDataSourceId");

                            b1.Property<string>("Url")
                                .IsRequired();

                            b1.HasKey("XtreamPlaylistDataSourceId");

                            b1.ToTable("PlaylistDataSources");

                            b1.HasOne("Synker.Domain.Entities.XtreamPlaylistDataSource")
                                .WithOne("Server")
                                .HasForeignKey("Synker.Domain.Entities.Core.UriAddress", "XtreamPlaylistDataSourceId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
